::cisco::eem::event_register_syslog pattern "rx_xbma.*L2-E3INGRESSQ.*PLIM error" maxrun 3600

############################################################################################################
# Two Syslog Messages:
#
# LC/0/11/CPU0:Jan 28 02:42:08.562 : rx_xbma[77]: %L2-E3INGRESSQ-4-INTERRUPT : PLIM error: reg 0x2000
# LC/0/11/CPU0:Jan 28 02:42:08.668 : hfa_main[56]: %L2-PSE-6-INFO_MSG : Info: Invoking Soft Error Recovery  
############################################################################################################

# Define the namespace
namespace import ::cisco::eem::*
namespace import ::cisco::lib::*
 
##################################
# Verify the environment vars:
##################################
# Storage location:
if {![info exists _e3ATM_PlimError_storage_location]} {
  set result "EEM policy error: environment var _e3ATM_PlimError_storage_location not set"
  error $result $errInfo
}

##################################
# Default syslog/email messages
##################################
set msg_repeat 1

##################################
# PROCs:
##################################
proc extract_location {line} {
  global FH
  set location ""

  # Trim up the line remove extra space/tabs etc:
  regsub -all {[ \r\t\n]+} $line " " line
  # Remove any leading white space:
  regsub -all {^[ ]} $line "" line
  # Remove any ending white space:
  regsub -all {[ ]$} $line "" line

  # Example: LC/0/0/CPU0

  if {[regexp {^time_sec} $line]} {
    regexp "\{(.*): .*" $line - msg
    set location [ lindex [split $msg ":"] 0 ]
    regsub -all {^LC\/} $location "" location
    puts $FH "Location Extracted: $location\n"
  } else {
    set location [ lindex [split $line ":"] 0 ]
    regsub -all {^LC\/} $location "" location
    puts $FH "Location Extracted: $location\n"
  }
  return $location
}

proc send_syslog {msg repeat} {
  set kont 0

  while {$kont < $repeat} {
    action_syslog msg $msg
    incr kont
  }
}

proc send_email {node syslog_msg msg} {
  global FH
  global _email_to _email_from
  global _email_server _domainname
  global email_subject

  action_syslog msg "Sending e3ATM_PlimError Detection to $_email_to"

  foreach recipient [split $_email_to " "] {
    set email [format "Mailservername: %s" "$_email_server"]
    set email [format "%s\nFrom: %s" "$email" "$_email_from"]
    set email [format "%s\nTo: %s" "$email" "$recipient"]
    set email [format "%s\nCc: %s" "$email" ""]
    set email [format "%s\nSubject: %s\n" "$email" $email_subject]

    # Email BODY:
    set email [format "%s\n%s" "$email" "The $node node experienced the following syslog:"]
    set email [format "%s\n%s\n\n" "$email" "$syslog_msg"]
    set email [format "%s\n%s" "$email" "$msg"]
   
    # Send email message:
    if [catch {smtp_send_email $email} result] {
      puts "smtp_send_email: $result"
    }
 
    puts $FH "EMAIL DATA BELOW SENT TO: $_email_to\n"
    puts $FH $email
  }
}


##################################
# main
##################################
global FH
global msg_repeat syslog_msg
global _email_to _email_from
global _email_server _domainname
global email_subject

if {[info exists _e3ATM_PlimError_msg_repeat]} {
  set repeat $_e3ATM_PlimError_msg_repeat
} else {
  set repeat $msg_repeat
}

# Capture the scripts start time:
set time_now [clock seconds]
# Set the seconds to go back from the previously captured script start time (45 seconds):
set seconds_to_go_back [expr $time_now - 45]

set date_time [clock format $time_now -format "%m-%d-%Y_%H.%M.%S"]
set filename "e3ATM_PlimError.$date_time"
# Open the output file (for write):
if [catch {open $_e3ATM_PlimError_storage_location/$filename w} result] {
    error $result
}
set FH $result

# Timestamp the script start time to the output log file:
set date [clock format $time_now -format "%T %Z %a %b %d %Y"]
puts $FH "*Timestamp = $date"

# Log the nodes hostname to the output log file:
set node [info hostname]
puts $FH "Node: $node"

set syslog_msg "Node: $node - EEM e3ATM_PlimError POLICY DETECTED A POSSIBLE ENGINE 3 ATM LC FAILURE"

set email_subject "**Node $node - EEM e3ATM_PlimError POLICY DETECTED A POSSIBLE ENGINE 3 ATM LC FAILURE"
# Verify if the routers configuration has the _e3ATM_PlimError_email_subject line configuration set:
if {[info exists _e3ATM_PlimError_email_subject]} {
  set email_subject "$node $_e3ATM_PlimError_email_subject"
}

# Set the array arr_einfo to the eem event_reqinfo
array set arr_einfo [event_reqinfo]
# Extract the syslog message the finally kicked off the EEM script:
set kickoff_msg $arr_einfo(msg)

# Determine the location from the kickoff_msg:
set location [extract_location $kickoff_msg]

puts "\n\nLOCATION: $location\n\n"

############################################################
# Set the show commands to capture from the router:
############################################################
set show_cmds "show log
               show platform
               show ip int brief
               show controller pse ingress stat loc $location
               show controller fwd stats loc $location
               show controller ingressq qmstats 0 loc $location"

set admin_show_cmds "show install"
###################################################
# End of show commands
###################################################

puts $FH "\nFinal Syslog Trigger:\n"
puts $FH "$kickoff_msg\n"

puts $FH "\n"
set msg "EEM Script (e3ATM_PlimError) detected possible E3 ATM LC failure. EEM Script will capture a number of outputs"
puts $FH $msg
action_syslog msg $msg

close $FH
