::cisco::eem::event_register_syslog pattern "rx_xbma.*L2-E3INGRESSQ-4-INTERRUPT.*PLIM error" maxrun 180


# Engine 3 Syslog Error Message:
# rx_xbma[77]: %L2-E3INGRESSQ-4-INTERRUPT :  PLIM error: reg 0x2000


namespace import ::cisco::eem::*
namespace import ::cisco::lib::*

#################################################################################################
# These vars below should be set via the IOX global configuration for event manager environment:
#set _email_server 9.3.3.249
#set _domainname "cisco.com"
#set _email_from "ssearch@cisco.com"
#set _email_to "ssearch@cisco.com"
#set _storage_location "harddisk:/eem"
#set _output_log "eem_e3_fail_detect.log"

# Verify the environment vars:
if {![info exists _storage_location]} {
  set result "EEM policy error: environment var _storage_location not set"
  error $result $errInfo
}
if {![info exists _output_log]} {
  set result "EEM policy error: environment var _output_log not set"
  error $result $errInfo
}

# Below var flag is used to verify if the e3_fail_detect.tcl script has run previously:
set e3_fail_detect_run_flag "$_storage_location/e3_fail_detect_run_flag"

# Disabled the email sending environment check since the email option is disabled:
;#if {![info exists _email_server]} {
;#  set result "EEM policy error: environment var _email_server not set"
;#  error $result $errInfo
;#}
;#if {![info exists _email_from]} {
;#  set result "EEM policy error: environment var _email_from not set"
;#  error $result $errInfo
;#}
;#if {![info exists _email_to]} {
;#  set result "EEM policy error: environment var _email_to not set"
;#  error $result $errInfo
;#}
;#if {![info exists _domainname]} {
;#  set result "EEM policy error: environment var _domainname not set"
;#  error $result $errInfo
;#}

#################################################################################################


###########################################
# Procedures
###########################################
proc send_email {node syslog_msg LC sh_platform1 sh_platform2 msg} {
  global FH _email_to _email_from _email_server

  #action_syslog msg "Sending E3 Fail Detection to $_email_to"
  set email [format "Mailservername: %s" "$_email_server"]
  set email [format "%s\nFrom: %s" "$email" "$_email_from"]
  set email [format "%s\nTo: %s" "$email" "$_email_to"]
  set email [format "%s\nCc: %s" "$email" ""]
  set email [format "%s\nSubject: %s\n" "$email" "**Node $node E3 Fail Detection**"]
  # Email BODY:
  set email [format "%s\n%s" "$email" "The $node node experienced the following syslog:"]
  set email [format "%s\n%s\n" "$email" "$syslog_msg"]
  set email [format "%s\n%s" "$email" "$msg"]
  
  set email [format "%s\n%s" "$email" "BEFORE admin show platform data:"]
  set email [format "%s\n%s\n" "$email" "$sh_platform1"]
  
  if {$sh_platform2 != 0} {
    set email [format "%s\n%s\n" "$email" "AFTER admin show platform data:"]
    set email [format "%s\n%s\n" "$email" "$sh_platform2"]
  }
  
  # Send email message:
  if [catch {smtp_send_email $email} result] {
    puts "smtp_send_email: $result"
  }

  puts $FH "EMAIL DATA BELOW SENT TO: $_email_to\n"
  puts $FH $email
}


###########################################
# MAIN/main
###########################################
   
###########################################
# Globals:
global FH _email_to _email_from _email_server
global e3_fail_detect_run_flag

# Open the output file (for write):
if [catch {open $_storage_location/$_output_log w} result] {
    error $result
}
set FH $result

set date [clock format [clock sec] -format "%T %Z %a %b %d %Y"]
puts $FH "*Timestamp = $date"
puts $FH "Cisco Engine 3 LC Failure Detection Script"
puts $FH "Designed for: IOX Embedded Event Manager (EEM)"
puts $FH "by: Scott Search (ssearch@cisco.com)\n"
 
###########################################
# Open Node Connection
if [catch {cli_open} result] {
  error $result $errorInfo
} else {
  array set cli $result
}

# Set node hostname:
set node [info hostname]
puts $FH "Node: $node"

set junk ""
set location ""
set LC ""

# Set the array arr_einfo to the eem event_reqinfo
array set arr_einfo [event_reqinfo]
# Extract the syslog message:
set syslog_msg $arr_einfo(msg)

# Extract the LC:
regexp {^(.*?):.*} $syslog_msg junk location
regexp {^\w+/(.*?)} $location - LC

puts $FH "SYSLOG MSG:\n$syslog_msg"
puts $FH "Suspect location: $LC\n"

# Enter Admin mode:
if [catch {cli_exec $cli(fd) "admin"} result] {
  error $result $errorInfo
}

# Gather the 'admin show platform' info BEFORE
if [catch {cli_exec $cli(fd) "show platform"} result] {
  error $result $errorInfo
}
# Remove trailing router prompt
regexp {\n*(.*\n)([^\n]*)$} $result junk sh_platform

# Print show platform data:
if {$sh_platform != ""} {
  puts $FH "\nBEFORE show platform data:\n$sh_platform\n"
}

# If the $e3_fail_detect_run_flag file exists exit from script:
if [file exists $e3_fail_detect_run_flag] {
  # Exit Admin mode:
  if [catch {cli_exec $cli(fd) "exit"} result] {
    error $result $errorInfo
  }
  set msg "EEM policy e3_fail_detect detected an Engine 3 LC failure $LC yet $e3_fail_detect_run_flag exists No Action Taken!"
  ;#send_email $node $syslog_msg $LC $sh_platform 0 $msg
  action_syslog msg $msg

  set date [clock format [clock sec] -format "%T %Z %a %b %d %Y"]
  puts $FH "\n*Timestamp = $date"
  set msg "$msg\nDelete $e3_fail_detect_run_flag in order to activate the EEM e3_fail_detect script."
  set msg "$msg\n\nThe $node node experienced the following syslog:"
  set msg "$msg\n$syslog_msg"
  set msg "$msg\n\nBEFORE admin show platform Output:"
  set msg "$msg\n$sh_platform\n\n"
  puts $FH $msg
  close $FH
  exit
}

# Create the $e3_fail_detect_run_flag file
if [catch {open $e3_fail_detect_run_flag w} result] {
    error $result
}
set RUN $result
set date [clock format [clock sec] -format "%T %Z %a %b %d %Y"]
puts $RUN "*Timestamp = $date"
close $RUN

# Finally shutdown the LC
# Enter config terminal:
;#if [catch {cli_exec $cli(fd) "config t"} result] {
;#  error $result $errorInfo
;#}
;#if [catch {cli_exec $cli(fd) "hw-mod shut loc $LC"} result] {
;#  error $result $errorInfo
;#}
;#if [catch {cli_exec $cli(fd) "commit"} result] {
;#  error $result $errorInfo
;#}
;#if [catch {cli_exec $cli(fd) "end"} result] {
;#  error $result $errorInfo
;#}
# End of CARD shutdown tasks

# Gather the 'admin show platform' info AFTER
if [catch {cli_exec $cli(fd) "show platform"} result] {
  error $result $errorInfo
}
# Remove trailing router prompt
regexp {\n*(.*\n)([^\n]*)$} $result junk sh_platform2

# Print show platform data:
if {$sh_platform2 != ""} {
  puts $FH "\nAFTER show platform data:\n$sh_platform2\n"
}

# Exit Admin mode:
if [catch {cli_exec $cli(fd) "exit"} result] {
  error $result $errorInfo
}

###########################################
# Craft up the email message:
#disabled email option per Gaurav
;#set msg "The e3_fail_detect eem policy script has shutdown the following card:\n$LC"
;#send_email $node $syslog_msg $LC $sh_platform $sh_platform2 $msg

set msg "\n\n**Node: $node Engine 3 LC Failure Detection**"
set msg "$msg\nThe $node node experienced the following syslog:"
set msg "$msg\n$syslog_msg"
set msg "$msg\n\nThe e3_fail_detect eem policy script has shutdown the following LC card location:"
set msg "$msg\n$LC"
set msg "$msg\n\nBEFORE admin show platform output:"
set msg "$msg\n$sh_platform\n\n"
set msg "$msg\n\nAFTER admin show platform output:"
set msg "$msg\n$sh_platform2\n\n"

set msg "$msg\nThe $e3_fail_detect_run_flag file exists. Be sure to delete the file in order to"
set msg "$msg\nActivate the EEM e3_fail_detect script.\n"

puts $FH $msg

set date [clock format [clock sec] -format "%T %Z %a %b %d %Y"]
puts $FH "\n*Timestamp = $date"
 
close $FH

# Send syslog message:
action_syslog msg "EEM policy e3_fail_detect detected a Engine 3 LC failure and has SHUTDOWN LC CARD: $LC"
