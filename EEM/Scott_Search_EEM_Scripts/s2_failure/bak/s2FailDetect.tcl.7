::cisco::eem::event_register_syslog occurs 3 period 10 pattern "fabricq_mgr.*FABRIC-FABRICQ-3-RESET : Reseting Fabricq ASIC Device" maxrun 300

#------------------------------------------------------------------
# s2FailDetect EEM Script
#
#
# May 2010 - Scott Search (ssearch@cisco.com)
# Updated: 06/14/2020 -ssearch
#
#
# This tool is an EEM policy to detect the syslog pattern above in the
# event a CRS node experiences S2/Fabric problems.  This script will 
# eventually cost-out the node.
#
# EEM Script is dependent on the following event manager environment variables:
#
#   _s2FailDetect_ospf_id <xxx>               -User must provide routers router ospf process id
#   _s2FailDetect_second_diff 30              -Defined seconds diff for syslog msg matching
#   _s2FailDetect_unique_locations 3          -Defined number of unique locations 
#   _s2FailDetect_output_log <logfile name>   -User must provide the output log file name "s2FailDetect.log"
#   _s2FailDetect_storage_location <storage>  -Disk/hardisk storage location "harddisk:/eem"
#
#
# NOTES:
#   _s2FailDetect_ospf_id -Can be set to 0 and the EEM script will NOT COST OUT router
#
#
# Email Option:
#   -To activate the email option the following event manager environment variables must be set:
#
#   _email_server    _email_from
#   _email_to        _email_domainname
#
#
# EEM Script Logic:
#
# The script is triggered by the syslog pattern above.  If the pattern occurs 3 times and within
# a 10 second period this EEM policy will be started.  The script checks the syslogs via the
# sys_reqinfo_syslog_history for matching events within the _s2FailDetect_second_diff from the
# triggering syslog event pattern.  If there are at minimum _s2FailDetect_unique_locations the
# script proceeds with the costing out of the router.
# 
#
# Copyright (c) 2010 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
#
#
# The namespace import commands that follow import some cisco TCL extensions
# that are required to run this script

# Define the namespace
namespace import ::cisco::eem::*
namespace import ::cisco::lib::*
 
##########################################################################################
# Set the pattern the script will filter on (maybe set within the eem environment vars):
##########################################################################################
set pattern "FABRIC-FABRICQ-3-RESET : Reseting Fabricq ASIC Device"

###################################################
# Set the show commands to capture from the router:
###################################################
set admin_show_cmds "show controllers fabricq health
                     show controllers fabric plane all
                     show platform"

##################################
# Verify the environment vars:
##################################
# Storage location:
if {![info exists _s2FailDetect_storage_location]} {
  set result "EEM policy error: environment var _s2FailDetect_storage_location not set"
  error $result $errInfo
}
# Output log file:
if {![info exists _s2FailDetect_output_log]} {
  set result "EEM policy error: environment var _s2FailDetect_output_log not set"
  error $result $errInfo
}
# Seconds difference, used for comparing previous matched syslogs:
if {![info exists _s2FailDetect_second_diff]} {
  set result "EEM policy error: environment var _s2FailDetect_second_diff not set"
  error $result $errInfo
}
# Unique locations for comparing:
if {![info exists _s2FailDetect_unique_locations]} {
  set result "EEM policy error: environment var _s2FailDetect_unique_locations not set"
  error $result $errInfo
}
# Nodes Router ospf process:
if {![info exists _s2FailDetect_ospf_id]} {
  set result "EEM policy error: environment var _s2FailDetect_ospf_id not set"
  error $result $errInfo
}


##################################
# PROCs:
##################################
proc extract_location {line} {
  global FH
  set location ""

  # Trim up the line remove extra space/tabs etc:
  regsub -all {[ \r\t\n]+} $line " " line
  # Remove any leading white space:
  regsub -all {^[ ]} $line "" line
  # Remove any ending white space:
  regsub -all {[ ]$} $line "" line

  if {[regexp {^time_sec} $line]} {
    regexp "\{(.*): .*" $line - msg
    set location [ lindex [split $msg ":"] 0 ]
    puts $FH "Location Extracted: $location\n"
  } else {
    set location [ lindex [split $line ":"] 0 ]
    puts $FH "Location Extracted: $location\n"
  }
  return $location
}

proc send_email {node syslog_msg msg} {
  global FH
  global _email_to _email_from
  global _email_server _email_domainname

;#  if {![info exists _email_server]} {
;#    set result "EEM policy error: environment var _email_server not set"
;#    error $result $errInfo
;#  }
;#  if {![info exists _email_from]} {
;#    set result "EEM policy error: environment var _email_from not set"
;#    error $result $errInfo
;#  }
;#  if {![info exists _email_to]} {
;#    set result "EEM policy error: environment var _email_to not set"
;#    error $result $errInfo
;#  }
;#  if {![info exists _email_domainname]} {
;#    set result "EEM policy error: environment var _email_domainname not set"
;#    error $result $errInfo
;#  }

  action_syslog msg "Sending S2 Fail Detect Detection to $_email_to"
  set email [format "Mailservername: %s" "$_email_server"]
  set email [format "%s\nFrom: %s" "$email" "$_email_from"]
  set email [format "%s\nTo: %s" "$email" "$_email_to"]
  set email [format "%s\nCc: %s" "$email" ""]
  set email [format "%s\nSubject: %s\n" "$email" "**Node $node S2 Fail Detection**"]

  # Email BODY:
  set email [format "%s\n%s" "$email" "The $node node experienced the following syslog:"]
  set email [format "%s\n%s\n\n" "$email" "$syslog_msg"]
  set email [format "%s\n%s" "$email" "$msg"]
   
  # Send email message:
  if [catch {smtp_send_email $email} result] {
    puts "smtp_send_email: $result"
  }
 
  puts $FH "EMAIL DATA BELOW SENT TO: $_email_to\n"
  puts $FH $email
}


##################################
# Main/main
##################################
global FH
global _email_to _email_from
global _email_server _email_domainname
set locations ""

# Open the output file (for write):
if [catch {open $_s2FailDetect_storage_location/$_s2FailDetect_output_log w} result] {
    error $result
}
set FH $result

# Capture the scripts start time:
set time_now [clock seconds]
# Set the seconds to go back from the previously captured script start time:
set seconds_to_go_back [expr $time_now - $_s2FailDetect_second_diff]

# Timestamp the script start time to the output log file:
set date [clock format $time_now -format "%T %Z %a %b %d %Y"]
puts $FH "*Timestamp = $date"

# Log the nodes hostname to the output log file:
set node [info hostname]
puts $FH "Node: $node"

# Set the array arr_einfo to the eem event_reqinfo
array set arr_einfo [event_reqinfo]
# Extract the syslog message the finally kicked off the EEM script:
set syslog_msg $arr_einfo(msg)

puts $FH "\n"
puts $FH "Final Syslog Trigger:"
puts $FH $syslog_msg
puts $FH "\n"

# Extract the first location from the triggering syslog event:
lappend locations [extract_location $syslog_msg]

# Capture the syslogs history:
set hist_list [sys_reqinfo_syslog_history]
# Remove the following characters from $hist_list: {}"
regsub -all {\{|\}|\"} $hist_list {} hist_list

foreach rec $hist_list {
  foreach syslog $rec {
    # Verify the syslog msg has the pattern we are searching on:
    if {[regexp "$pattern" $syslog]} {
      # Trim up the line remove extra space/tabs etc:
      regsub -all {[ \r\t\n]+} $syslog " " syslog
      # Remove any leading white space:
      regsub -all {^[ ]} $syslog "" syslog
      # Remove any ending white space:
      regsub -all {[ ]$} $syslog "" syslog

      if {[regexp {^time_sec} $syslog]} {
        # Extract the syslog msg time of occurrence:
        regexp {^time_sec (\d+) .*} $syslog - time_rec
        # If the syslog message time of occurrence is within our go_back time
        # then process the syslog msg:
        if {$time_rec > $seconds_to_go_back} {
          lappend locations [extract_location $syslog]
          puts $FH $syslog
        }
      }
    }
  }
}

# Open Node Connection
if [catch {cli_open} result] {
  error $result $errorInfo
} else {
  array set cli $result
}
# Enter Admin mode:
if [catch {cli_exec $cli(fd) "admin"} result] {
  error $result $errorInfo
}

puts $FH ""
# Capture the system show commands:
foreach cmd [split $admin_show_cmds "\n"] {
  # Trim up the cmd remove extra space/tabs etc:
  regsub -all {[ \r\t\n]+} $cmd " " cmd
  # Remove any leading white space:
  regsub -all {^[ ]} $cmd "" cmd
  puts $FH "command output: $cmd"
 
  if [catch {cli_exec $cli(fd) "$cmd"} result] {
    error $result $errorInfo
  }
  # Remove trailing router prompt
  regexp {\n*(.*\n)([^\n]*)$} $result junk cmd_output
  puts $FH $cmd_output
  puts $FH ""
}
# Exit Admin mode:
if [catch {cli_exec $cli(fd) "exit"} result] {
  error $result $errorInfo
}

puts $FH ""
puts $FH "locations before sort: $locations"
set unique_locations [lsort -unique $locations]
puts $FH "unique_locations: $unique_locations\n"
set num_unique_locations [llength $unique_locations]

if {$num_unique_locations > $_s2FailDetect_unique_locations} {
  # Proceed with the node COST OUT as long as $s2FailDetect_ospf_id is set to a value above 0:
  if {$_s2FailDetect_ospf_id > 0} {
    puts $FH "Unique Locations ($num_unique_locations) above configured _s2FailDetect_unique_locations: $_s2FailDetect_unique_locations"
    puts $FH "Continuing on with Costing Out node!"

    # Enter config terminal:
    if [catch {cli_exec $cli(fd) "config t"} result] {
      error $result $errorInfo
    }
    if [catch {cli_exec $cli(fd) "router ospf $_s2FailDetect_ospf_id"} result] {
      error $result $errorInfo
    }
    if [catch {cli_exec $cli(fd) "max-metric router-lsa include-stub"} result] {
      error $result $errorInfo
    }
    if [catch {cli_exec $cli(fd) "commit"} result] {
      error $result $errorInfo
    }
    if [catch {cli_exec $cli(fd) "end"} result] {
      error $result $errorInfo
    }
    # End of Configuration tasks

    # Send syslog message:
    action_syslog msg "EEM policy detected a possible Node S2 problem, COSTING OUT the node"
    set msg "Router has been COST-OUT"
  } else {
    # No cost out due to $_s2FailDetect_ospf_id not set above 0
    set msg "EEM policy detected a possible Node S2 problem, yet NO COST OUT was performed due to the _s2FailDetect_ospf_id not set"
    action_syslog msg $msg
    set msg "Router has been NOT been COSTED OUT due to _s2FailDetect_ospf_id not set above 0"
  }
} else {
  # No COST OUT
  puts $FH "Unique Locations ($num_unique_locations) below threshold: $_s2FailDetect_unique_locations"
  puts $FH "Exiting EEM policy without Costing Out node"

  # Send syslog message:
  action_syslog msg "EEM policy detected a possible Node S2 problem, yet unique locations ($num_unique_locations) below threshold: $_s2FailDetect_unique_locations"
  set msg "Router has NOT been COSTED OUT unique locations ($num_unique_locations) below threshold: $_s2FailDetect_unique_locations"
}

if {[info exists _email_server] && [info exists _email_domainname] && [info exists _email_from] && [info exists _email_to]} {
  # Call on the send_email proc to generate an email message
  send_email $node $syslog_msg $msg
}

close $FH
